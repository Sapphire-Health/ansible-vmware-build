---
  - name: Build a kickstart file
    uri:
      url: "http://dev.spiehlerfamily.com/ks/rhel.php"
      method: POST
      headers:
        accept: test/plain
      body_format: json
      follow_redirects: safe
      body: "{{ hostvars[item] }}"
      status_code: 201
    register: ksresp
  - name: Kickstart URL
    ansible.builtin.debug:
      msg: "{{ ksresp }}"
  - name: Create a virtual machine in vCenter
    vmware_guest:
      annotation: "{{ hostvars[item].annotation | default('') }}"
      validate_certs: "{{ hostvars[item].validate_certs }}"
      datacenter: "{{ hostvars[item].vcenter_datacenter }}"
      folder: "{{ hostvars[item].vcenter_folder }}"
      name: "{{ item }}"
      state: present
      guest_id: "{{ hostvars[item].vcenter_guestid }}"
      cluster: "{{ hostvars[item].vcenter_cluster }}"
      #disk: "{{ hostvars[item].disks }}"
      disk:
      - size_mb: "{{ hostvars[item].vm_storage.physical[0].size_mb }}"
        type: "{{ hostvars[item].vm_storage.physical[0].type }}"
        datastore: "{{ hostvars[item].vm_storage.physical[0].datastore }}"
      cdrom:
      - controller_number: 0
        unit_number: 0
        state: present
        type: iso
        iso_path: "{{ hostvars[item].iso_path }}"
      hardware:
        memory_mb: "{{ hostvars[item].memory_mb }}"
        num_cpus: "{{ hostvars[item].num_cpus }}"
        scsi: "{{ hostvars[item].vm_storage.physical[0].controller_type }}"
        boot_firmware: "{{ hostvars[item].boot_firmware | default('bios') }}"
      networks:
      - name: "{{ hostvars[item].vcenter_network }}"
        device_type: "{{ hostvars[item].device_type }}"
      wait_for_ip_address: no
    delegate_to: localhost
    register: vm
  #idempotency issues are network related. See https://github.com/ansible/ansible/issues/38605
  #using this method because vmware_guest doesn't support doing this until ansible version 2.10
  - name: Arrange disk controllers
    vmware_guest_disk:
      validate_certs: "{{ hostvars[item].validate_certs }}"
      datacenter: "{{ hostvars[item].vcenter_datacenter }}"
      name: "{{ vm.instance.hw_name }}"
      disk:
        - size_mb: "{{ disk.size_mb }}"
          type: "{{ disk.type }}"
          datastore: "{{ disk.datastore }}"
          scsi_controller: "{{ disk.controller_number }}"
          unit_number: "{{ disk.unit_number }}"
          scsi_type: "{{ disk.controller_type }}"
    loop: "{{ hostvars[item].vm_storage.physical }}"
    loop_control:
      loop_var: disk
    when: vm.changed
  - name: Power on virtual machine in vCenter
    vmware_guest:
      validate_certs: "{{ hostvars[item].validate_certs }}"
      datacenter: "{{ hostvars[item].vcenter_datacenter }}"
      folder: "{{ hostvars[item].vcenter_folder }}"
      name: "{{ vm.instance.hw_name }}"
      state: poweredon
    when: vm.changed
  - name: Send Keystrokes
    vmware_guest_sendkey:
      validate_certs: "{{ hostvars[item].validate_certs }}"
      name: "{{ vm.instance.hw_name }}"
      keys_send:
        - "{{ 'ESC' if hostvars[item].boot_firmware is not defined or hostvars[item].boot_firmware == 'bios' else 'c' }}"
    delegate_to: localhost
    when: vm.changed
  - name: Send BIOS Keystrokes
    vmware_guest_sendkey:
      validate_certs: "{{ hostvars[item].validate_certs }}"
      name: "{{ vm.instance.hw_name }}"
      string_send: "vmlinuz initrd=initrd.img ip={{ hostvars[item].ansible_host }}::{{ hostvars[item].gateway }}:{{ hostvars[item].netmask }}:{{ hostvars[item].fqdn | default(item) }}:{{ hostvars[item].iface }}:none nameserver={{ hostvars[item].dns1 }} nameserver={{ hostvars[item].dns2 }} inst.ks={{ ksresp.link }} {{ hostvars[item].extra_kernel_args }}"
    delegate_to: localhost
    when:
      - vm.changed
      - hostvars[item].boot_firmware is not defined or hostvars[item].boot_firmware == 'bios'
  - name: Send EFI Keystrokes
    vmware_guest_sendkey:
      validate_certs: "{{ hostvars[item].validate_certs }}"
      name: "{{ vm.instance.hw_name }}"
      string_send: "linuxefi /images/pxeboot/vmlinuz ip={{ hostvars[item].ansible_host }}::{{ hostvars[item].gateway }}:{{ hostvars[item].netmask }}:{{ hostvars[item].fqdn | default(item) }}:{{ hostvars[item].iface }}:none nameserver={{ hostvars[item].dns1 }} nameserver={{ hostvars[item].dns2 }} inst.ks={{ ksresp.link }} {{ hostvars[item].extra_kernel_args }}"
    delegate_to: localhost
    when:
      - vm.changed
      - hostvars[item].boot_firmware is defined
      - hostvars[item].boot_firmware == 'efi'
  - name: Send EFI Keystrokes
    vmware_guest_sendkey:
      validate_certs: "{{ hostvars[item].validate_certs }}"
      name: "{{ vm.instance.hw_name }}"
      keys_send:
        - ENTER
    delegate_to: localhost
    when:
      - vm.changed
      - hostvars[item].boot_firmware is defined
      - hostvars[item].boot_firmware == 'efi'
  - name: Send EFI Keystrokes
    vmware_guest_sendkey:
      validate_certs: "{{ hostvars[item].validate_certs }}"
      name: "{{ vm.instance.hw_name }}"
      string_send: "initrdefi /images/pxeboot/initrd.img"
    delegate_to: localhost
    when:
      - vm.changed
      - hostvars[item].boot_firmware is defined
      - hostvars[item].boot_firmware == 'efi'
  - name: Send EFI Keystrokes
    vmware_guest_sendkey:
      validate_certs: "{{ hostvars[item].validate_certs }}"
      name: "{{ vm.instance.hw_name }}"
      keys_send:
        - ENTER
    delegate_to: localhost
    when:
      - vm.changed
      - hostvars[item].boot_firmware is defined
      - hostvars[item].boot_firmware == 'efi'
  - name: Send EFI Keystrokes
    vmware_guest_sendkey:
      validate_certs: "{{ hostvars[item].validate_certs }}"
      name: "{{ vm.instance.hw_name }}"
      string_send: "boot"
    delegate_to: localhost
    when:
      - vm.changed
      - hostvars[item].boot_firmware is defined
      - hostvars[item].boot_firmware == 'efi'
  - name: Send Keystrokes
    vmware_guest_sendkey:
      validate_certs: "{{ hostvars[item].validate_certs }}"
      name: "{{ vm.instance.hw_name }}"
      keys_send:
        - ENTER
    delegate_to: localhost
    when:
      - vm.changed
      - hostvars[item].debug|default(False) != true
